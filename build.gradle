// TODO
// * add mode to run jetty in background
// * set outputs.dir for custom tasks
import com.eriwen.gradle.css.tasks.CombineCssTask
import com.eriwen.gradle.css.tasks.MinifyCssTask

buildscript {
  configurations.create('builder')
  configurations.create('singlePageBuilder')

  repositories {
    if (project.hasProperty('useMavenLocal')) {
      mavenLocal()
    }
    jcenter()
    maven {
      url 'https://repository-master.mulesoft.org/nexus/content/repositories/public'
    }
  }

  dependencies {
    classpath 'com.eriwen:gradle-css-plugin:2.12.0'
    builder 'com.mulesoft.documentation.builder:mule-docs-builder:1.0.2'
    singlePageBuilder 'com.mulesoft.documentation.builder:mule-docs-single-page-builder:1.0.2'
  }

  configurations.all {
    resolutionStrategy {
      // NOTE override JRuby version required by AsciidoctorJ to work around hang in CodeRay
      // TODO can we figure out why the version specified by the docs builder is not honored?
      force 'org.jruby:jruby:9.0.5.0'
    }
  }
}

defaultTasks 'build'
group = 'com.mulesoft.documentation'

apply from: 'gradle/git-helper.gradle'

ext {
  dryRun = project.hasProperty('dryRun')
  assetsDir = '_assets'
  assetsRepoBranchName = 'master'
  assetsRepoCommit = "origin/$assetsRepoBranchName"
  assetsRepoUri = 'https://github.com/mulesoft/mulesoft-docs-site-assets'
  builderMaxHeapSize = project.hasProperty('maxHeapSize') ? project.property('maxHeapSize') : '2500m'
  builderJvmArgs = ['-Xverify:none', '-XX:+OptimizeStringConcat', '-XX:+UseFastAccessorMethods', '-Djava.net.preferIPv4Stack=true', '-Djava.awt.headless=true']
  docsRepoBranchName = System.env.GIT_BRANCH ?
      System.env.GIT_BRANCH.replaceFirst(/^origin\//, '') :
      git('rev-parse --abbrev-ref HEAD', '.', true)
  // NOTE we assume here that all branches reside in the upstream repository
  docsRepoUri = 'https://github.com/mulesoft/mulesoft-docs'
  profile = project.hasProperty('profile') ? project.property('profile') : 'dev'
  profileBuildScript = "gradle/$profile-profile.gradle"
  siteDir = '_site'
  siteUri = 'http://localhost:8000'
  tempDir = '_tmp'
  templatesDir = '_templates'
  srcTemplatesDir = "$assetsDir/_templates"
}

if (file(profileBuildScript).exists()) apply from: profileBuildScript
apply plugin: 'css'

task cloneAssetsRepo {
  outputs.dir(assetsDir).upToDateWhen { false }
  onlyIf { !file("$assetsDir/.gitkeep").file }
  doLast {
    if (file("$assetsDir/.git").directory) {
      git "fetch -q origin", assetsDir
    }
    else {
      git "clone -q -n $assetsRepoUri $assetsDir", file(assetsDir).parent
    }
    git "checkout -q -B $assetsRepoBranchName $assetsRepoCommit", assetsDir
  }
}

task setup(group: 'Build', description: 'Prepares the build.') {
  dependsOn cloneAssetsRepo
}

task clean(type: Delete, group: 'Build', description: 'Deletes assets and site directories.') {
  delete assetsDir, siteDir, tempDir
}

// TODO site builder should accept a custom templates directory
task copyTemplates(type: Copy) {
  dependsOn setup
  onlyIf { file(srcTemplatesDir).directory }
  from srcTemplatesDir
  into templatesDir
}

task buildHtml(type: JavaExec, group: 'Build', description: 'Builds HTML pages.') {
  dependsOn copyTemplates
  mustRunAfter setup
  classpath = buildscript.configurations.builder
  main = 'com.mulesoft.documentation.builder.Client'
  args = ['-s', projectDir.absolutePath, '-d', siteDir, '-ghr', docsRepoUri, '-ghb', docsRepoBranchName, '-url', siteUri]
  maxHeapSize = builderMaxHeapSize
  jvmArgs = builderJvmArgs
  //outputs.dir siteDir
  doFirst {
    // NOTE revert residual changes to template(s), which may or may not be managed by git
    if (!file(srcTemplatesDir).directory) {
      if (git("status --porcelain $templatesDir", '.', true).startsWith('?? ')) {
        file(templatesDir).deleteDir()
      }
      else {
        git "checkout -- $templatesDir"
      }
    }
  }
  doLast {
    // NOTE revert local changes to template(s), which may or may not be managed by git
    if (file(srcTemplatesDir).directory) {
      if (git("status --porcelain $templatesDir", '.', true).startsWith('?? ')) {
        file(templatesDir).deleteDir()
      }
      else {
        git "checkout -- $templatesDir"
      }
    }
  }
}

// pass file to build using -Pfile=path/to/file.adoc
task buildHtmlSingle(type: JavaExec, group: 'Build', description: 'Builds a single HTML page.') {
  classpath = buildscript.configurations.singlePageBuilder
  main = 'com.mulesoft.documentation.builder.previewer.Client'
  args = ['-s', file(project.hasProperty('file') ? project.property('file') : 'index.adoc').absolutePath, '-d', tempDir]
}

task copyAssets(type: Copy) {
  dependsOn setup
  mustRunAfter buildHtml
  from(assetsDir) {
    exclude 'README.md'
    exclude '_*/**'
    exclude 'css'
  }
  into siteDir
  //outputs.dir siteDir

  // preserve last modified times (futile since git clone doesn't preserve last modification times)
  //def fileCopyDetails = []
  //eachFile { fileCopyDetails << it }
  //doLast {
  //  fileCopyDetails.each { new File(destinationDir, it.path).setLastModified(it.lastModified) }
  //}
}

css {
  source {
    standard {
      css {
        srcDir "$assetsDir/css"
        include '*.css'
      }
    }
    less {
      css {
        srcDir "$assetsDir/css"
        include '*.less'
      }
    }
  }
}

lesscss {
  dependsOn setup
  mustRunAfter copyAssets
  source = css.source.less.css.asFileTree
  dest = "${buildDir}/generated-css/mulesoft"
}

task combineMulesoftCss(type: CombineCssTask, group: 'Build') {
  source = lesscss
  dest = "${buildDir}/css/mulesoft.css"
}

task combineVendorCss(type: CombineCssTask, group: 'Build') {
  source = css.source.standard.css.asFileTree
  dest = "${buildDir}/css/vendor.css"
}

task minifyMulesoftCss(type: MinifyCssTask, group: 'Build') {
  source = combineMulesoftCss
  dest = "${siteDir}/css/mulesoft.min.css"
}

task minifyVendorCss(type: MinifyCssTask, group: 'Build') {
  source = combineVendorCss
  dest = "${siteDir}/css/vendor.min.css"
}

task minifyAllCss(group: 'Build') {
  dependsOn minifyMulesoftCss, minifyVendorCss
}

task build(group: 'Build', description: 'Builds site.') {
  dependsOn setup, buildHtml, copyAssets, minifyAllCss
  mustRunAfter clean
}

task serve(type: JettyRun, group: 'Tools', description: 'Runs site in a local preview server.') {
  mustRunAfter build
  classpath = files()
  contextPath ''
  httpPort 8000
  reload 'automatic'
  webAppSourceDirectory file(siteDir)
}
